apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: aws-iam-manager-ingress
  namespace: aws-iam-manager
  labels:
    app.kubernetes.io/name: aws-iam-manager
    app.kubernetes.io/component: ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    # Enable CORS for external access
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    # Let's Encrypt certificate management
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    # Force SSL redirect
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - DOMAIN_PLACEHOLDER
    secretName: aws-iam-manager-tls
  rules:
  # Primary domain (from HOST variable)
  - host: DOMAIN_PLACEHOLDER
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: oauth2-proxy
            port:
              number: 80
  # For external access via IP or custom domain (configurable)
  - host: "*.amazonaws.com"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: oauth2-proxy
            port:
              number: 80
  # For local testing and direct IP access
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: oauth2-proxy
            port:
              number: 80