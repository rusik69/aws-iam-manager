name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: make deps

      - name: Run linting
        run: make lint || echo "Linting completed with warnings"

      - name: Run tests with coverage
        run: make test-coverage

      - name: Check test coverage
        run: |
          if [ -f coverage.out ]; then
            COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
            echo "Test coverage: ${COVERAGE}%"
            if (( $(echo "$COVERAGE < 70" | bc -l) )); then
              echo "⚠️  Test coverage is below 70%"
            else
              echo "✅ Test coverage is acceptable"
            fi
          fi

      - name: Upload coverage to Codecov
        if: github.event_name != 'pull_request'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          fail_ci_if_error: false


      - name: Build frontend
        run: make build-frontend

      - name: Validate Makefile and Dockerfile
        run: |
          make help
          make lint-docker

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: ${{ github.event_name == 'pull_request' }}

      - name: Test Docker image
        run: |
          # Use the built image for testing
          IMAGE_TAG=${{ github.event_name == 'pull_request' && 'aws-iam-manager:latest' || format('{0}/{1}:latest', env.REGISTRY, env.IMAGE_NAME) }}

          if [ "${{ github.event_name }}" == "pull_request" ]; then
            IMAGE_TAG="aws-iam-manager:latest"
          else
            IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          fi

          docker run --rm -d -p 8080:8080 --name test-container \
            -e AWS_ACCESS_KEY_ID=test \
            -e AWS_SECRET_ACCESS_KEY=test \
            -e AWS_REGION=us-east-1 \
            $IMAGE_TAG

          # Wait for container to start
          sleep 15

          # Test health endpoint
          if curl -f http://localhost:8080/ --max-time 10; then
            echo "✅ Container health check passed"
          else
            echo "❌ Container health check failed"
            docker logs test-container
            exit 1
          fi

          # Cleanup
          docker stop test-container


      - name: Generate deployment summary
        if: github.event_name != 'pull_request'
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Quick Start:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker run -d -p 8080:8080 \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e AWS_ACCESS_KEY_ID=your-access-key \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e AWS_SECRET_ACCESS_KEY=your-secret-key \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e AWS_REGION=us-east-1 \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY