name: Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-binaries:
    name: Build Cross-platform Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Get release version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION=${{ github.event.release.tag_name }}
          else
            VERSION=${{ github.event.inputs.tag }}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build CLI binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          BINARY_NAME="iam-manager"
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi

          go build -a -installsuffix cgo \
            -ldflags="-w -s -X main.version=${{ steps.version.outputs.version }}" \
            -o "dist/${BINARY_NAME}-${GOOS}-${GOARCH}" \
            ./cmd/iam-manager

      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/

  build-server-binary:
    name: Build Server Binary
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux]
        goarch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Build frontend
        run: |
          cd frontend
          npm ci
          npm run build

      - name: Get release version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION=${{ github.event.release.tag_name }}
          else
            VERSION=${{ github.event.inputs.tag }}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build server binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          go build -a -installsuffix cgo \
            -ldflags="-w -s -X main.version=${{ steps.version.outputs.version }}" \
            -o "dist/aws-iam-manager-server-${GOOS}-${GOARCH}" \
            ./cmd/server

      - name: Create distribution package
        run: |
          mkdir -p "dist/aws-iam-manager-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}"
          cp "dist/aws-iam-manager-server-${{ matrix.goos }}-${{ matrix.goarch }}" "dist/aws-iam-manager-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}/aws-iam-manager-server"
          cp -r frontend/dist "dist/aws-iam-manager-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}/frontend"
          cp README.md "dist/aws-iam-manager-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}/"
          cp .env.example "dist/aws-iam-manager-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}/"

          cd dist
          tar -czf "aws-iam-manager-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz" \
            "aws-iam-manager-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}"

      - name: Upload server artifacts
        uses: actions/upload-artifact@v4
        with:
          name: server-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*.tar.gz

  build-docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get release version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION=${{ github.event.release.tag_name }}
          else
            VERSION=${{ github.event.inputs.tag }}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.version.outputs.version }}
            type=semver,pattern={{version}},value=${{ steps.version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    name: Create GitHub Release
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: [build-binaries, build-server-binary, build-docker]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "iam-manager-*" -type f -exec cp {} release-assets/ \;
          find artifacts -name "*.tar.gz" -type f -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Generate changelog
        run: |
          echo "## Changes" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD~1)..HEAD >> CHANGELOG.md || echo "- Initial release" >> CHANGELOG.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag }}
          name: Release ${{ github.event.inputs.tag }}
          body_path: CHANGELOG.md
          files: release-assets/*
          draft: false
          prerelease: false